local RobloxReplicatedStorage = game:GetService('RobloxReplicatedStorage')
local RbxAnalyticsService = game:GetService('RbxAnalyticsService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local UserInputService = game:GetService('UserInputService')
local NetworkClient = game:GetService('NetworkClient')
local TweenService = game:GetService('TweenService')
local VirtualUser = game:GetService('VirtualUser')
local HttpService = game:GetService('HttpService')
local RunService = game:GetService('RunService')
local LogService = game:GetService('LogService')
local Players = game:GetService('Players')
local Debris = game:GetService('Debris')
local Stats = game:GetService('Stats')

if not game:IsLoaded() then
    game.Loaded:Wait()
end

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "LoadingScreen"
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(1, 0, 1, 0)
frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
frame.BackgroundTransparency = 0.6
frame.Parent = screenGui

local uiGradient = Instance.new("UIGradient")
uiGradient.Parent = frame
uiGradient.Color = ColorSequence.new(Color3.fromRGB(0, 0, 0), Color3.fromRGB(50, 50, 50))
uiGradient.Rotation = 45

local textLabel = Instance.new("TextLabel")
textLabel.Text = "Credit: Rudert and Flezzpe"
textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
textLabel.TextSize = 50
textLabel.TextStrokeTransparency = 0.6
textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
textLabel.TextWrapped = true
textLabel.Size = UDim2.new(0, 550, 0, 200)
textLabel.Position = UDim2.new(0.5, -250, 0.5, -75)
textLabel.TextXAlignment = Enum.TextXAlignment.Center
textLabel.TextYAlignment = Enum.TextYAlignment.Center
textLabel.Parent = frame

local border = Instance.new("UICorner")
border.CornerRadius = UDim.new(0, 10)
border.Parent = textLabel

local shadow = Instance.new("Frame")
shadow.Size = UDim2.new(1, 6, 1, 6)
shadow.Position = UDim2.new(0, 3, 0, 3)
shadow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
shadow.BackgroundTransparency = 0.5
shadow.ZIndex = textLabel.ZIndex - 1
shadow.Parent = textLabel

local tweenService = game:GetService("TweenService")

local fadeInTweenInfo = TweenInfo.new(1.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
local fadeInTween = tweenService:Create(textLabel, fadeInTweenInfo, {TextTransparency = 0, Position = UDim2.new(0.5, -250, 0.5, -75)})

local moveUpTweenInfo = TweenInfo.new(1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
local moveUpTween = tweenService:Create(textLabel, moveUpTweenInfo, {Position = UDim2.new(0.5, -250, 0.5, -150)})

local fadeOutTweenInfo = TweenInfo.new(1, Enum.EasingStyle.Quart, Enum.EasingDirection.In)
local fadeOutTween = tweenService:Create(textLabel, fadeOutTweenInfo, {TextTransparency = 1})

fadeInTween:Play()

fadeInTween.Completed:Connect(function()
    wait(1)
    moveUpTween:Play()

    moveUpTween.Completed:Connect(function()
        fadeOutTween:Play()

        fadeOutTween.Completed:Connect(function()
            screenGui:Destroy()
        end)
    end)
end)

local LocalPlayer = Players.LocalPlayer

local NothingLibrary = loadstring(game:HttpGetAsync('https://raw.githubusercontent.com/3345-c-a-t-s-u-s/NOTHING/main/source.lua'))();

local notify = NothingLibrary.Notification();

notify.new({
        Title = "...VicoX Is Fetch...",
	Description = "welcome to Vico script i hope you like it ðŸ˜‹..",
	Duration = 6,
	Icon = "rbxassetid://8997385628"
})

local LocalPlayer = Players.LocalPlayer

local interface = loadstring(game:HttpGet('https://raw.githubusercontent.com/flezzpe/EvadeAutoBHOP/main/libs/ef.java'))()

local RunTime = workspace.Runtime
local Alive = workspace.Alive
local Dead = workspace.Dead

local AutoParry = {
	ball = nil,
	target = nil,
	entity_properties = nil,
}
-- Deklarasi Player
local Player = {
	Entity = nil,

	properties = {
		grab_animation = nil,
	},
}

Player.Entity = {
    properties = {
		sword = '',
		server_position = Vector3.zero,
		velocity = Vector3.zero,
		position = Vector3.zero,
        is_moving = false,
		speed = 0,
		ping = 0,
    },
}

local World = {}

-- Deklarasi AutoParry.ball
AutoParry.ball = {
	training_ball_entity = nil,
	client_ball_entity = nil,
    ball_entity = nil,
    
    properties = {
		aero_dynamic_time = tick(),
		hell_hook_completed = true,
		last_position = Vector3.zero,
		rotation = Vector3.zero,
		position = Vector3.zero,
		last_warping = tick(),
        parry_remote = nil, -- RemoteEvent yang digunakan untuk FireServer
		is_curved = false,
		last_tick = tick(),
        auto_spam = false,
        cooldown = false,
		respawn_time = 0,
        parry_range = 5,
        spam_range = 0,
        maximum_speed = 0,
		old_speed = 0,
        parries = 0,
		direction = 0,
        distance = 0,
        velocity = 0,
        last_hit = 0,
		lerp_radians = 0,
		radians = 0,
		speed = 0,
		dot = 0,
    },
}

-- Deklarasi AutoParry.target
AutoParry.target = {
    current = nil,
    from = nil,
    aim = nil,
}

AutoParry.aim = {
    Name = nil,
}

-- Deklarasi AutoParry.entity_properties
AutoParry.entity_properties = {
    server_position = Vector3.zero,
	velocity = Vector3.zero,
	is_moving = false,
	direction = 0,
	distance = 0,
	speed = 0,
	dot = 0,
}

function create_animation(object: Instance, info: TweenInfo, value: table)
	local animation = TweenService:Create(object, info, value)

	animation:Play()
			
	task.wait(info.Time)
	
	Debris:AddItem(animation, 0)
	animation:Destroy()
	animation = nil
end

local ConnectionsManager = {}

function ConnectionsManager:disconnect()
    if not ConnectionsManager[self] then
        return
    end

    ConnectionsManager[self]:Disconnect()
    ConnectionsManager[self] = nil
end


function ConnectionsManager:abadone()
	interface.flags = {}
	
	for _, connection in ConnectionsManager do
		if typeof(connection) == 'function' then
			continue
		end

		connection:Disconnect()
		connection = nil
	end
end

ConnectionsManager['controller'] = RunService.Heartbeat:Connect(function()
	if not interface.disconnected then
		return
	end

	ConnectionsManager.abadone()
end)

local function linear_predict(a: any, b: any, time_volume: number)
    return a + (b - a) * time_volume
end

function World:get_pointer()
    local mouse_location = UserInputService:GetMouseLocation()
    local ray = workspace.CurrentCamera:ScreenPointToRay(mouse_location.X, mouse_location.Y, 0)

    return CFrame.lookAt(ray.Origin, ray.Origin + ray.Direction)
end

function AutoParry.get_ball()
    -- Iterate through all children under the "Balls" folder in the workspace
    for _, ball in pairs(workspace:WaitForChild("Balls"):GetChildren()) do
        -- Check if the object is a BasePart and has the "realBall" attribute set to true
        if ball:IsA("BasePart") and ball:GetAttribute("realBall") then
            return ball
        end
    end
end

function AutoParry.get_client_ball()
    -- Iterate through all children under the "Balls" folder in the workspace
    for _, ball in pairs(workspace:WaitForChild("Balls"):GetChildren()) do
        -- Check if the object is a BasePart and has the "realBall" attribute set to true
        if ball:IsA("BasePart") and ball:GetAttribute("realBall") then
            return ball
        end
    end
end

local function getTrainingBall()
	for index, ball in workspace:WaitForChild("TrainingBalls"):GetChildren() do
		if ball:IsA("BasePart") and ball:GetAttribute("realBall") then
			return ball
		end
	end
end

function Player:get_aim_entity()
	local closest_entity = nil
	local minimal_dot_product = -math.huge
	local camera_direction = workspace.CurrentCamera.CFrame.LookVector

	for _, player in Alive:GetChildren() do
		if not player then
			continue
		end

		if player.Name ~= LocalPlayer.Name then
			if not player:FindFirstChild('HumanoidRootPart') then
				continue
			end

			local entity_direction = (player.HumanoidRootPart.Position - workspace.CurrentCamera.CFrame.Position).Unit
			local dot_product = camera_direction:Dot(entity_direction)
	
			if dot_product > minimal_dot_product then
				minimal_dot_product = dot_product
				closest_entity = player
			end
		end
	end

	return closest_entity
end

function Player:get_closest_player_to_cursor()
    local closest_player = nil
    local minimal_dot_product = -math.huge

    for _, player in workspace.Alive:GetChildren() do
        if player == LocalPlayer.Character then
            continue
        end
        
        if player.Parent ~= Alive then
            continue
        end

        local player_direction = (player.PrimaryPart.Position - workspace.CurrentCamera.CFrame.Position).Unit
        local pointer = World.get_pointer()
        local dot_product = pointer.LookVector:Dot(player_direction)

        if dot_product > minimal_dot_product then
            minimal_dot_product = dot_product
            closest_player = player
        end
    end

    return closest_player
end

local platform = game:GetService("UserInputService").TouchEnabled and "Android" or "PC"

print("Platform detected:", platform)

function resolve_parry_Remote()
    while true do
        local found = false
        -- Gunakan `game:GetDescendants()` untuk mencari di seluruh game
        for _, object in pairs(game:GetDescendants()) do
            if object:IsA("RemoteEvent") and object.Name:find("\n") then
                AutoParry.ball.properties.parry_remote = object
                found = true
                print("RemoteEvent found on platform:", platform, " | Remote Name:", object.Name)
                break
            end
        end

        if found then
            break
        end
        wait(0) -- Interval pencarian
    end

    if not AutoParry.ball.properties.parry_remote then
        warn("RemoteEvent could not be found. Please check if the RemoteEvent exists!")
    end
end

resolve_parry_Remote()

function AutoParry.perform_grab_animation()
	local animation = ReplicatedStorage.Shared.SwordAPI.Collection.Default:FindFirstChild('GrabParry')
	local currently_equipped = Player.Entity.properties.sword
    
	if not currently_equipped or currently_equipped == 'Titan Blade' then
        return
    end

	if not animation then
		return
	end

	local sword_data = ReplicatedStorage.Shared.ReplicatedInstances.Swords.GetSword:Invoke(currently_equipped)

	if not sword_data or not sword_data['AnimationType'] then
        return
    end

	local character = LocalPlayer.Character

	if not character or not character:FindFirstChild('Humanoid') then
		return
	end

	for _, object in ReplicatedStorage.Shared.SwordAPI.Collection:GetChildren() do
        if object.Name ~= sword_data['AnimationType'] then
            continue
        end
		
		if not (object:FindFirstChild('GrabParry') or object:FindFirstChild('Grab')) then
            continue
        end

		local sword_animation_type = 'GrabParry'

		if object:FindFirstChild('Grab') then
			sword_animation_type = 'Grab'
		end

        animation = object[type]
    end

	Player.properties.grab_animation = character.Humanoid:LoadAnimation(animation)
	Player.properties.grab_animation:Play()
end

function AutoParry.perform_parry()
	local ball_properties = AutoParry.ball.properties
	
	if ball_properties.cooldown and not ball_properties.auto_spam then
		return
	end

	ball_properties.parries += 1
	AutoParry.ball.properties.last_hit = tick()

	local camera = workspace.CurrentCamera
	local camera_direction = camera.CFrame.Position
	
	local direction = camera.CFrame
	local target_position = AutoParry.entity_properties.server_position
	
    if not ball_properties.auto_spam then
		AutoParry.perform_grab_animation()

		ball_properties.cooldown = true
	
		local current_curve = interface.flags['curve_method']

		if current_curve == 'Linear' then
			direction = CFrame.new(LocalPlayer.Character.PrimaryPart.Position, target_position)
		end

		if current_curve == 'Backwards' then
			direction = CFrame.new(camera_direction, (camera_direction + (-camera.CFrame.LookVector * 10000)) + Vector3.new(0, 1000, 0))
		end
	
		if current_curve == 'Random' then
			direction = CFrame.new(LocalPlayer.Character.PrimaryPart.Position, Vector3.new(math.random(-1000, 1000), math.random(-350, 1000), math.random(-1000, 1000)))
		end
	
		if current_curve == 'Accelerated' then
			direction = CFrame.new(LocalPlayer.Character.PrimaryPart.Position, target_position + Vector3.new(0, 150, 0))
		end
	else
		direction = CFrame.new(camera_direction, target_position + Vector3.new(0, 60, 0))

		ball_properties.parry_remote:FireServer(
			0,
			direction,
			{ [AutoParry.target.aim.Name] = target_position },
			{ target_position.X, target_position.Y },
			false
		)
	
		task.delay(0.25, function()
			if ball_properties.parries > 0 then
				ball_properties.parries -= 1
			end
		end)

		return
	end

	ball_properties.parry_remote:FireServer(
		0.5,
		direction,
		{ [AutoParry.target.aim.Name] = target_position },
		{ target_position.X, target_position.Y },
		false
	)

    task.delay(0.25, function()
        if ball_properties.parries > 0 then
            ball_properties.parries -= 1
        end
    end)
end

local Windows = NothingLibrary.new({
	Title = "Vico - NeuX",
	Description = "Vico - Blade Ball - Test",
	Keybind = Enum.KeyCode.LeftControl,
	Logo = 'http://www.roblox.com/asset/?id=18898582662'
})

local TabFrame = Windows:NewTab({
	Title = "Main",
	Description = "very cool and awesome",
	Icon = "rbxassetid://7733960981"
})


--// auto parry section

do
    local AutoSection = TabFrame:NewSection({
        Title = "Parry",
        Icon = "rbxassetid://7743869054",
        Position = "Left"
    })

    AutoSection:NewToggle({
		Title = "AutoParry",
		Default = false,
		Callback = function(state)
                auto_parry_enabled = state
	        print("Autoparry:", state)
		end
	})

    -- Toggle for auto parry rotation
    AutoSection:NewToggle({
        Title = "Rotation",
        Default = false,
        Callback = function(state)
        auto_parry_rotation_enabled = state
            print("Auto Parry Rotation:", tr)
        end
    })

    -- Slider for auto parry rotation acuity
    AutoSection:NewSlider({
        Title = "Acuity",
        Min = 1,
        Max = 10,
        Default = 5,
        Callback = function(value)
            auto_parry_rotation_acuity_value = value
            print("Auto Parry Rotation Acuity:", value)
        end
    })

    -- Dropdown for selecting curve method
    AutoSection:NewDropdown({
        Title = "Curve Method",
        Data = {"Accelerated", "Backwards", "Linear", "Camera", "Random"},
        Default = "Linear",
        Callback = function(value)
            if not interface.flags then
                interface.flags = {}
            end
            interface.flags['curve_method'] = value
            print("Selected Curve Method:", value)
        end
    })
end

-- Handling Idle state
LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.zero)
end)

function AutoParry.reset()
	AutoParry.ball.properties.is_curved = false
    AutoParry.ball.properties.auto_spam = false
    AutoParry.ball.properties.cooldown = false
    AutoParry.ball.properties.maximum_speed = 0
    AutoParry.ball.properties.parries = 0
	AutoParry.entity_properties.server_position = Vector3.zero
	AutoParry.target.current = nil
	AutoParry.target.from = nil
end

ReplicatedStorage.Remotes.PlrHellHooked.OnClientEvent:Connect(function(hooker: Model)
	if hooker.Name == LocalPlayer.Name then
		AutoParry.ball.properties.hell_hook_completed = true

		return
	end

	AutoParry.ball.properties.hell_hook_completed = false
end)

ReplicatedStorage.Remotes.PlrHellHookCompleted.OnClientEvent:Connect(function()
	AutoParry.ball.properties.hell_hook_completed = true
end)

function AutoParry.is_curved()
	local target = AutoParry.target.current

	if not target then
		return false
	end

	local ball_properties = AutoParry.ball.properties
	local current_target = AutoParry.target.current.Name

	if target.PrimaryPart:FindFirstChild('MaxShield') and current_target ~= LocalPlayer.Name and ball_properties.distance < 50 then
		return false
	end

	if AutoParry.ball.ball_entity:FindFirstChild('TimeHole1') and current_target ~= LocalPlayer.Name and ball_properties.distance < 100 then
		ball_properties.auto_spam = false
		
		return false
	end

	if AutoParry.ball.ball_entity:FindFirstChild('WEMAZOOKIEGO') and current_target ~= LocalPlayer.Name and ball_properties.distance < 100 then
		return false
	end

	if AutoParry.ball.ball_entity:FindFirstChild('At2') and ball_properties.speed <= 0 then
		return true
	end

	if AutoParry.ball.ball_entity:FindFirstChild('AeroDynamicSlashVFX') then
		Debris:AddItem(AutoParry.ball.ball_entity.AeroDynamicSlashVFX, 0)

		ball_properties.auto_spam = false
		ball_properties.aero_dynamic_time = tick()
	end

	if RunTime:FindFirstChild('Tornado') then
		if ball_properties.distance > 5 and (tick() - ball_properties.aero_dynamic_time) < (RunTime.Tornado:GetAttribute("TornadoTime") or 1) + 0.314159 then
			return true
		end
	end

	if not ball_properties.hell_hook_completed and target.Name == LocalPlayer.Name and ball_properties.distance > 5 - math.random() then
		return true
	end
	
	local ball_direction = ball_properties.velocity.Unit
	local ball_speed = ball_properties.speed
	
	local speed_threshold = math.min(ball_speed / 100, 40)
	local angle_threshold = 40 * math.max(ball_properties.dot, 0)

	local player_ping = Player.Entity.properties.ping

	local accurate_direction = ball_properties.velocity.Unit
	accurate_direction *= ball_direction

	local direction_difference = (accurate_direction - ball_properties.velocity).Unit
	local accurate_dot = ball_properties.direction:Dot(direction_difference)
	local dot_difference = ball_properties.dot - accurate_dot
	local dot_threshold = 0.5 - player_ping / 1000

	local reach_time = ball_properties.distance / ball_properties.maximum_speed - (player_ping / 1000)
	local enough_speed = ball_properties.maximum_speed > 100

	local ball_distance_threshold = 15 - math.min(ball_properties.distance / 1000, 15) + angle_threshold + speed_threshold
	
	if enough_speed and reach_time > player_ping / 10 then
        ball_distance_threshold = math.max(ball_distance_threshold - 15, 15)
    end
	
	if ball_properties.distance < ball_distance_threshold then
		return false
	end

	if dot_difference < dot_threshold then
		return true
	end

	if ball_properties.lerp_radians < 0.018 then
		ball_properties.last_curve_position = ball_properties.position
		ball_properties.last_warping = tick() 
	end

	if (tick() - ball_properties.last_warping) < (reach_time / 1.5) then
		return true
	end

	return ball_properties.dot < dot_threshold
end

local old_from_target = nil :: Model

function AutoParry:is_spam()
	local target = AutoParry.target.current

	if not target then
		return false
	end

	if AutoParry.target.from ~= LocalPlayer.Character then
		old_from_target = AutoParry.target.from
	end

	if self.parries < 3 and AutoParry.target.from == old_from_target then
		return false
	end

	local player_ping = Player.Entity.properties.ping
	local distance_threshold = 18 + (player_ping / 80)

	local ball_properties = AutoParry.ball.properties
	local reach_time = ball_properties.distance / ball_properties.maximum_speed - (player_ping / 1000)

	if (tick() - self.last_hit) > 0.8 and self.entity_distance > distance_threshold and self.parries < 3 then
		self.parries = 1

		return false
	end

 	if ball_properties.lerp_radians > 0.028 then
		if self.parries > 3 then
			self.parries = 1
		end

		return false
	end

	if (tick() - ball_properties.last_warping) < (reach_time / 1.3) and self.entity_distance > distance_threshold and self.parries < 4 then
		if self.parries > 3 then
			self.parries = 1
		end

		return false
	end

	if math.abs(self.speed - self.old_speed) < 5.2 and self.entity_distance > distance_threshold and self.speed < 60 and self.parries < 3 then
		if self.parries > 3 then
			self.parries = 0
		end

		return false
	end
	
	if self.speed < 10 then
		self.parries = 1

		return false
	end

	if self.maximum_speed < self.speed and self.entity_distance > distance_threshold then
		self.parries = 1
		
		return false
	end

	if self.entity_distance > self.range and self.entity_distance > distance_threshold then
		if self.parries > 2 then
			self.parries = 1
		end

		return false
	end

	if self.ball_distance > self.range and self.entity_distance > distance_threshold then
		if self.parries > 2 then
			self.parries = 2
		end

		return false
	end

	if self.last_position_distance > self.spam_accuracy and self.entity_distance > distance_threshold then
		if self.parries > 4 then
			self.parries = 2
		end

		return false
	end

	if self.ball_distance > self.spam_accuracy and self.ball_distance > distance_threshold then
		if self.parries > 3 then
			self.parries = 2
		end

		return false
	end

	if self.entity_distance > self.spam_accuracy and self.entity_distance > (distance_threshold - math.pi) then
		if self.parries > 3 then
			self.parries = 2
		end

		return false
	end

    return true	
end

RunService:BindToRenderStep('server position simulation', 1, function()
    local ping = Stats.Network.ServerStatsItem['Data Ping']:GetValue()

    if not LocalPlayer.Character then
        return
    end

    if not LocalPlayer.Character.PrimaryPart then
        return
    end

	local PrimaryPart = LocalPlayer.Character.PrimaryPart
    local old_position = PrimaryPart.Position

    task.delay(ping / 1000, function()
        Player.Entity.properties.server_position = old_position
	end)
end)

RunService.PreSimulation:Connect(function()
	NetworkClient:SetOutgoingKBPSLimit(math.huge)

	local character = LocalPlayer.Character
	
	if not character then
		return
	end

	if not character.PrimaryPart then
		return
	end

	local player_properties = Player.Entity.properties

	player_properties.sword = character:GetAttribute('CurrentlyEquippedSword')
    player_properties.ping = Stats.Network.ServerStatsItem['Data Ping']:GetValue()
    player_properties.velocity = character.PrimaryPart.AssemblyLinearVelocity
    player_properties.speed = Player.Entity.properties.velocity.Magnitude
    player_properties.is_moving = Player.Entity.properties.speed > 30
end)

AutoParry.ball.ball_entity = AutoParry.get_ball()
AutoParry.ball.client_ball_entity = AutoParry.get_client_ball()

RunService.PreSimulation:Connect(function()
	local ball = AutoParry.ball.ball_entity
	
	if not ball then
		return
	end

	local zoomies = ball:FindFirstChild('zoomies')

	local ball_properties = AutoParry.ball.properties

    ball_properties.position = ball.Position
	ball_properties.velocity = ball.AssemblyLinearVelocity

	if zoomies then
		ball_properties.velocity = ball.zoomies.VectorVelocity
	end

    ball_properties.distance = (Player.Entity.properties.server_position - ball_properties.position).Magnitude
    ball_properties.speed = ball_properties.velocity.Magnitude
    ball_properties.direction = (Player.Entity.properties.server_position - ball_properties.position).Unit
    ball_properties.dot = ball_properties.direction:Dot(ball_properties.velocity.Unit)
	ball_properties.radians = math.rad(math.asin(ball_properties.dot))
	ball_properties.lerp_radians = linear_predict(ball_properties.lerp_radians, ball_properties.radians, 0.8)

	if not (ball_properties.lerp_radians < 0) and not (ball_properties.lerp_radians > 0) then
		ball_properties.lerp_radians = 0.027
	end

    ball_properties.maximum_speed = math.max(ball_properties.speed, ball_properties.maximum_speed)

    AutoParry.target.aim = (not is_mobile and Player.get_closest_player_to_cursor() or Player.get_aim_entity())

	if ball:GetAttribute('from') ~= nil then
		AutoParry.target.from = Alive:FindFirstChild(ball:GetAttribute('from'))
	end

    AutoParry.target.current = Alive:FindFirstChild(ball:GetAttribute('target'))

	if AutoParry.target == nil then
		return
	end

	ball_properties.rotation = ball_properties.position

	if AutoParry.target.current and AutoParry.target.current.Name == LocalPlayer.Name then
		ball_properties.rotation = AutoParry.target.aim.PrimaryPart.Position

		return
	end

	if not AutoParry.target.current then
		return
	end

	local target_server_position = AutoParry.target.current.PrimaryPart.Position
    local target_velocity = AutoParry.target.current.PrimaryPart.AssemblyLinearVelocity
    
    AutoParry.entity_properties.server_position = target_server_position
    AutoParry.entity_properties.velocity = target_velocity
    AutoParry.entity_properties.distance = LocalPlayer:DistanceFromCharacter(target_server_position)
    AutoParry.entity_properties.direction = (Player.Entity.properties.server_position - target_server_position).Unit
    AutoParry.entity_properties.speed = target_velocity.Magnitude
    AutoParry.entity_properties.is_moving = target_velocity.Magnitude > 0.1
    AutoParry.entity_properties.dot = AutoParry.entity_properties.is_moving and math.max(AutoParry.entity_properties.direction:Dot(target_velocity.Unit), 0)
end)

local LocalPlayer = Players.LocalPlayer

local is_respawned = false :: boolean

workspace.Balls.ChildRemoved:Connect(function(child)
	is_respawned = false
	
	if child == AutoParry.ball.ball_entity then
		AutoParry.ball.ball_entity = nil
		AutoParry.ball.client_ball_entity = nil

		ConnectionsManager.disconnect('on_target_change')
		AutoParry.reset()
	end
end)

workspace.Balls.ChildAdded:Connect(function()
	if is_respawned then
		return
	end

	is_respawned = true

	local ball_properties = AutoParry.ball.properties

	ball_properties.respawn_time = tick()

	AutoParry.ball.ball_entity = AutoParry.get_ball()
	AutoParry.ball.client_ball_entity = AutoParry.get_client_ball()

	ConnectionsManager['on_target_change'] = AutoParry.ball.ball_entity:GetAttributeChangedSignal('target'):Connect(function()
		if target == LocalPlayer.Name then
			ball_properties.cooldown = false

			return
		end

		ball_properties.cooldown = false
		ball_properties.old_speed = ball_properties.speed
		ball_properties.last_position = ball_properties.position
	
		ball_properties.parries += 1
	
		task.delay(0.25, function()
			if ball_properties.parries > 0 then
				ball_properties.parries -= 1
			end
		end)	
	end)
end)

RunService.PreSimulation:Connect(function()
	if not AutoParry.ball.properties.auto_spam then
		return
    end

	AutoParry.perform_parry()
end)

ReplicatedStorage.Remotes.ParrySuccessAll.OnClientEvent:Connect(function(slash: any, root: any)
	task.spawn(function()
		if root.Parent and root.Parent ~= LocalPlayer.Character then
			if root.Parent.Parent ~= Alive then
				return
			end
	
			AutoParry.ball.properties.cooldown = false
		end
	end)

	if AutoParry.ball.properties.auto_spam then
		AutoParry.perform_parry()
	end
end)

ConnectionsManager['auto_parry'] = RunService.PostSimulation:Connect(function()
	local auto_parry_enabled = interface.flags['auto_parry']

	if not auto_parry_enabled then
		AutoParry.reset()

        return
    end

	local Character = LocalPlayer.Character

	if not Character then
		return
	end

    if Character.Parent == Dead then
		AutoParry.reset()
		
        return
    end

    if not AutoParry.ball.ball_entity then
        return
    end

	local ball_properties = AutoParry.ball.properties

	ball_properties.is_curved = AutoParry.is_curved()
	
	local ping_threshold = math.clamp(Player.Entity.properties.ping / 10, 10, 16)
	local spam_accuracity = ball_properties.maximum_speed / 7 + ping_threshold
	local parry_accuracity = ball_properties.maximum_speed / 11.5 + ping_threshold

	ball_properties.spam_range = ping_threshold + ball_properties.speed / 2.2
    ball_properties.parry_range = ping_threshold + ball_properties.speed / math.pi * 1

	if Player.Entity.properties.sword == 'Titan Blade' then
		ball_properties.parry_range += 11
		ball_properties.spam_range += 2
	end	

	local distance_to_last_position = LocalPlayer:DistanceFromCharacter(ball_properties.last_position)

	if ball_properties.auto_spam and AutoParry.target.current then
		ball_properties.auto_spam = AutoParry.is_spam({
			speed = ball_properties.speed,
			spam_accuracy = spam_accuracity,
			parries = ball_properties.parries,
			ball_speed = ball_properties.speed,
			range = ball_properties.spam_range / (3.15 - ping_threshold / 10),
			last_hit = ball_properties.last_hit,
			ball_distance = ball_properties.distance,
			maximum_speed = ball_properties.maximum_speed,
			old_speed = AutoParry.ball.properties.old_speed,
			entity_distance = AutoParry.entity_properties.distance,
			last_position_distance = distance_to_last_position,
		})
	end

	if ball_properties.auto_spam then
        return
    end

	if AutoParry.target.current and AutoParry.target.current.Name == LocalPlayer.Name then
		ball_properties.auto_spam = AutoParry.is_spam({
			speed = ball_properties.speed,
			spam_accuracy = spam_accuracity,
			parries = ball_properties.parries,
			ball_speed = ball_properties.speed,
			range = ball_properties.spam_range,
			last_hit = ball_properties.last_hit,
			ball_distance = ball_properties.distance,
			maximum_speed = ball_properties.maximum_speed,
			old_speed = AutoParry.ball.properties.old_speed,
			entity_distance = AutoParry.entity_properties.distance,
			last_position_distance = distance_to_last_position,
		})
	end

	if ball_properties.auto_spam then
        return
    end
	
	if ball_properties.is_curved then
        return
    end

	if ball_properties.distance > ball_properties.parry_range and ball_properties.distance > parry_accuracity then
        return
    end
	
	if AutoParry.target.current and AutoParry.target.current ~= LocalPlayer.Character then
        return
    end

	AutoParry.perform_parry()

	task.spawn(function()
		repeat
			RunService.PreSimulation:Wait(0)
		until 
			(tick() - ball_properties.last_hit) > 1 - (ping_threshold / 100)

		ball_properties.cooldown = false
	end)
end)

task.defer(function()
	RunTime.ChildAdded:Connect(function(child)
		local no_render_enabled = interface.flags['no_render']
	
		local smart_no_render_enabled = interface.flags['smart_no_render']
		local ability_vulnerability_enabled = interface.flags['ability_vulnerability']

		if no_render_enabled then
            if AutoParry.ball.properties.auto_spam then
				AutoParry.perform_parry()
			end

			if (smart_no_render_enabled and not ability_vulnerability_enabled) and not AutoParry.ball.properties.auto_spam then
				LocalPlayer.PlayerScripts.EffectScripts.ClientFX.Enabled = true

				return
			end

			LocalPlayer.PlayerScripts.EffectScripts.ClientFX.Enabled = false

			if child.Name == 'Tornado' then
				return
			end

			Debris:AddItem(child, 0)

			return
		end

		LocalPlayer.PlayerScripts.EffectScripts.ClientFX.Enabled = true
	end)
end)

task.delay(30, function()
	if interface.disconnected then
        return
    end

print("All Done Initializazion:", platform)

local NothingLibrary = loadstring(game:HttpGetAsync('https://raw.githubusercontent.com/3345-c-a-t-s-u-s/NOTHING/main/source.lua'))();

local notify = NothingLibrary.Notification();

	local player_ping = Player.Entity.properties.ping

-- Cek koneksi pemain dan tampilkan notifikasi sesuai dengan ping
if player_ping > 100 and player_ping < 200 then
    notify.new({
        Title = "[Warning]",
        Description = "Low connection speed, delays may occur.",
        Duration = 5,
        Icon = "rbxassetid://8997385628"
    })
elseif player_ping >= 200 then
    notify.new({
        Title = "[Warning]",
        Description = "Critically slow connection speed, delays ensured.",
        Duration = 5,
        Icon = "rbxassetid://8997385628"
    })
   end
end)

local function optimizePerformance()
    -- Boost FPS by disabling unnecessary features and reducing settings
    game:GetService("Workspace").StreamingEnabled = true
    settings().Rendering.QualityLevel = Enum.QualityLevel.Level01 -- Lowest quality for best FPS
    game:GetService("Lighting").GlobalShadows = false -- Disable shadows
    game:GetService("Lighting").Brightness = 2 -- Adjust lighting for smoothness
    game:GetService("Lighting").OutdoorAmbient = Color3.fromRGB(0, 0, 0) -- Adjust ambient light for performance
    game:GetService("UserInputService").MouseDeltaSensitivity = 0.5 -- Reduce mouse lag
    setfpscap(60) -- Increase FPS cap to 120 for smoother performance

    -- Anti-render and unnecessary object loading optimization
    local function disableUnnecessaryRender()
        local Workspace = game:GetService("Workspace")
        
        -- Set the Streaming to manage distant objects loading
        Workspace.StreamingEnabled = true
        
        -- Set the StreamedInDistance to control how far objects are loaded
        -- Example distance can be adjusted based on your game's needs
        Workspace:SetAttribute("StreamedInDistance", 1000)  -- Adjust the distance as needed for your game

        -- Adjust the fog to reduce rendering load
        local lighting = game:GetService("Lighting")
        lighting.FogStart = 10000  -- Set start distance for fog (far away to avoid impact)
        lighting.FogEnd = 20000    -- Set end distance for fog (far away to avoid impact)
    end
    disableUnnecessaryRender()

    -- Optimize memory usage
    local function optimizeMemoryUsage()
        local serviceMemoryLimits = {
            ['Players'] = 4048,
            ['Workspace'] = 4048,
            ['ReplicatedStorage'] = 4048,
            -- Add more services as needed
        }

        for serviceName, limit in pairs(serviceMemoryLimits) do
            local service = game:GetService(serviceName)
            if service then
                -- Assuming there is a method to set memory limit
                -- Uncomment if such a method exists
                -- service:SetMemoryLimit(limit)
            end
        end
    end
    optimizeMemoryUsage()
end

optimizePerformance()
